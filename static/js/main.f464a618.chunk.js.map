{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/bfs.js","components/Header.jsx","components/Footer.jsx","components/Legend.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","_Component","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","_this$props","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","React","createElement","id","concat","className","Component","enqueueNeighborsDFS","node","grid","stack","_step","_iterator","_createForOfIteratorHelper","neighbors","length","push","filter","neighbor","isVisited","getUnvisitedNeighborsDFS","s","n","done","previousNode","err","e","f","enqueueNeighborsBFS","queue","_step2","_iterator2","getUnvisitedNeighborsBFS","isQueued","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","Header","style","backgroundColor","color","Footer","display","flexDirection","alignItems","justifyContent","padding","href","Legend","marginRight","width","height","marginTop","fontWeight","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","_this","state","mouseIsPressed","draggingStartNode","draggingEndNode","getInitialGrid","setState","console","log","newGrid","slice","newNode","_objectSpread","visitedNodesInOrder","_this2","currentRowNum","_ret","_loop","i","nodeTimeout","setTimeout","animateShortestPath","v","document","getElementById","_loop2","startNode","closestNode","shift","bfs","animatePathfinding","pop","dfs","map","distance","Infinity","_this3","_this$state","Fragment","margin","onClick","resetGrid","visualizeBFS","visualizeDFS","rowGap","gridGap","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f464a618.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n       : isWall\r\n       ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","export function bfs(grid, startNode, finishNode) {\r\n  let visitedNodesInOrder = [];\r\n  let queue = [];\r\n  queue.push(startNode);\r\n\r\n  while (!!queue.length) {\r\n    const closestNode = queue.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    enqueueNeighborsBFS(closestNode, grid, queue);\r\n  }\r\n}\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  let visitedNodesInOrder = [];\r\n  let stack = [];\r\n  stack.push(startNode);\r\n\r\n  while (!!stack.length) {\r\n    const currentNode = stack.pop();\r\n\r\n    if (currentNode.isWall) continue;\r\n    currentNode.isVisited = true;\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n    enqueueNeighborsDFS(currentNode, grid, stack);\r\n  }\r\n}\r\n\r\nfunction enqueueNeighborsDFS(node, grid, stack) {\r\n  const unvisitedNeighbors = getUnvisitedNeighborsDFS(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (!neighbor.isVisited) {\r\n      neighbor.previousNode = node;\r\n      stack.push(neighbor);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighborsDFS(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction enqueueNeighborsBFS(node, grid, queue) {\r\n  const unvisitedNeighbors = getUnvisitedNeighborsBFS(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (!neighbor.isVisited && !neighbor.isQueued) {\r\n      neighbor.previousNode = node;\r\n      neighbor.isQueued = true;\r\n      queue.push(neighbor);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighborsBFS(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={{ backgroundColor: '#0FA3B1', color: 'white' }}>\r\n      <h1>Pathfinding Algorithms Visualizer</h1>\r\n      {/* Add more content here */}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer style={{ \r\n      backgroundColor: '#0FA3B1', \r\n      color: 'white', \r\n      display: 'flex', \r\n      flexDirection: 'column', \r\n      alignItems: 'center', \r\n      justifyContent: 'center', \r\n      padding: '10px' \r\n    }}>\r\n      <div>\r\n        <span>Brendan Pulju | </span>\r\n        <span>Email: brendanpulju@gmail.com | </span>\r\n        <span><a href=\"https://github.com/BrendanPulju/algorithm-visualization-tool\">View Source Code on GitHub</a></span>\r\n      </div>\r\n      <div>\r\n        <span>Project completed: May 2024</span>\r\n        {/* Add more content here */}\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction Legend() {\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n        <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>\r\n          <div style={{ width: '20px', height: '20px', backgroundColor: 'green', marginRight: '5px' }}></div>\r\n          <p>Start Node</p>\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>\r\n          <div style={{ width: '20px', height: '20px', backgroundColor: 'red', marginRight: '5px' }}></div>\r\n          <p>End Node</p>\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          <div style={{ width: '20px', height: '20px', backgroundColor: '#0C3547', marginRight: '5px' }}></div>\r\n          <p>Wall Node</p>\r\n        </div>\r\n      </div>\r\n      <p style={{ marginTop: '10px' }}>\r\n        Click and drag to move \r\n        <span style={{ color: 'green', fontWeight: 'bold' }}> Start</span> and \r\n        <span style={{ color: 'red', fontWeight: 'bold' }}> End</span> nodes. Click nodes to create and clear \r\n        <span style={{ color: '#0C3547', fontWeight: 'bold' }}> Walls</span>.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Legend;","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {bfs, dfs, getNodesInShortestPathOrder} from '../algorithms/bfs';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport Legend from '../components/Legend';\r\n\r\n\r\n\r\n//import {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst NUM_COL = 30;\r\nconst NUM_ROW = 12;\r\n\r\nlet START_NODE_ROW = 6;\r\nlet START_NODE_COL = 7;\r\nlet FINISH_NODE_ROW = 6;\r\nlet FINISH_NODE_COL = 15;\r\n\r\nlet pathfindingSpeed = 50;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      draggingStartNode: false,\r\n      draggingEndNode: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    console.log('handleMouseDown');\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][col];\r\n    if (node.isStart) {\r\n      console.log('handleMouseDown=>isStart');\r\n      this.setState({ draggingStartNode: true });\r\n    } else if (node.isFinish) {\r\n      this.setState({ draggingEndNode: true });\r\n    } else {\r\n      const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n  \r\n  handleMouseEnter(row, col) {\r\n    console.log('handleMouseEnter');\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][col];\r\n    if (this.state.draggingStartNode) {\r\n      const startNode = newGrid[START_NODE_ROW][START_NODE_COL];\r\n      startNode.isStart = false;\r\n      node.isStart = true;\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n      this.setState({ grid: newGrid });\r\n    } else if (this.state.draggingEndNode) {\r\n      const finishNode = newGrid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n      finishNode.isFinish = false;\r\n      node.isFinish = true;\r\n      FINISH_NODE_ROW = row;\r\n      FINISH_NODE_COL = col;\r\n      this.setState({ grid: newGrid });\r\n    } else if (this.state.mouseIsPressed) { // Add this condition\r\n      const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n  \r\n  handleMouseUp() {\r\n    console.log('handleMouseUp');\r\n    this.setState({ mouseIsPressed: false, draggingStartNode: false, draggingEndNode: false });\r\n  }\r\n\r\n  animatePathfinding(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    let currentRowNum = 0;  \r\n\r\n    console.log(visitedNodesInOrder);\r\n\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      let nodeTimeout = (currentRowNum * 5 * NUM_ROW) + (i * 5);\r\n\r\n      //console.log(visitedNodesInOrder.length);\r\n      //console.log(i);\r\n\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, pathfindingSpeed + nodeTimeout);\r\n        return;\r\n      }\r\n      \r\n      //console.log('setTimeout: ' + nodeTimeout);\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, nodeTimeout);\r\n\r\n      currentRowNum++;\r\n    }\r\n  }\r\n  \r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    console.log(nodesInShortestPathOrder.length);\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      //console.log('setTimeout: ' + (100 + (10*i)));\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, (1000 + (pathfindingSpeed*i)));\r\n    }\r\n  }\r\n\r\n  visualizeBFS() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animatePathfinding(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n    console.log(visitedNodesInOrder);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animatePathfinding(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  resetGrid() {\r\n    const newGrid = this.state.grid.map(row => {\r\n      return row.map(node => {\r\n        return {\r\n          ...node,\r\n          isVisited: false,\r\n          distance: Infinity,\r\n          previousNode: null,\r\n        };\r\n      });\r\n    });\r\n  \r\n    this.setState({ grid: newGrid });\r\n  \r\n    // Reset the classes of the DOM elements\r\n    for (const row of newGrid) {\r\n      for (const node of row) {\r\n        let className = 'node';\r\n        if (node.isStart) {\r\n          className = 'node node-start';\r\n        } else if (node.isFinish) {\r\n          className = 'node node-finish';\r\n        } else if (node.isWall) {\r\n          className = 'node node-wall';\r\n        }\r\n        document.getElementById(`node-${node.row}-${node.col}`).className = className;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Legend />\r\n        <div className=\"App\" style={{ margin: '0', padding: '0' }}>\r\n          <div style={{ margin: '0' }}>\r\n            <button onClick={() => {this.resetGrid(); this.visualizeBFS();}}>\r\n              Visualize Breadth-First Search\r\n            </button>\r\n            <button className=\"algorithmButton\" onClick={() => {this.resetGrid(); this.visualizeDFS();}}>\r\n              Visualize Depth-First Search\r\n            </button>\r\n          </div>\r\n          <div className=\"grid\" style={{display: 'grid', rowGap: '0', gridGap: '0', marginTop: '25px'}}>\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < NUM_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUM_COL; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    //distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewUpdatedGrid = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}